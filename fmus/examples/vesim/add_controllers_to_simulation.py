import xml.etree.ElementTree as ET

from pathlib import Path

import argparse

from model_description_utils import *

if __name__ == '__main__':
    '''
    This script modifies a simulation file generated by ShipX to include:
        - a PID controller to adjust the rpm of the propellers to maintain a constant speed
        - a PID controller to adjust the rudder angle to maintain a constant heading

    The change to the xml file is applied using the built-in ElementTree library. 
    '''
    # ------------------------------- Settings -----------------------------------------------------
    parser = argparse.ArgumentParser(description='Add stormbird to simulation.')
    parser.add_argument('--velocity_in_knots', type=float, default=12.0, help='Velocity of ship.')
    parser.add_argument('--max_rpm',           type=float, default=75.0, help='Maximum rpm of propellers.')
    parser.add_argument('--max_rudder_angle_deg',  type=float, default=35.0, help='Maximum rudder angle.')
    parser.add_argument('--speed_prop_gain',   type=float, default=10.0, help='Proportional gain of speed controller.')
    parser.add_argument('--heading_prop_gain', type=float, default=1.0, help='Proportional gain of heading controller.')

    args = parser.parse_args()

    ship_name = "SOBC1"

    thruster_names = [
        'propeller_and_rudder_propeller_and_rudder'
    ]

    home_folder = Path.home()

    pid_source = '../../../../../github/fmu_from_struct/examples/pid_controller/PIDController.fmu'

    namespace = "http://opensimulationplatform.com/MSMI/OSPSystemStructure"
    
    ET.register_namespace('', namespace)

    # ------------------------------- load original file -------------------------------------------
    tree = ET.parse('OspSystemStructure_from_ship_x.xml')

    # get root element
    root = tree.getroot()

    # get simulators and connections
    simulators  = root.find('Simulators', namespaces={'': namespace})
    connections = root.find('Connections', namespaces={'': namespace})
    
    # ----------------------------- add new simulators ---------------------------------------------
    simulators[-1].tail = '\n\t\t'

    add_simulator(
        simulators,
        name = 'speed_controller',
        source= pid_source,
        initial_variables = {
            'set_point': args.velocity_in_knots * 0.514444444,
            'proportional_gain': 1.0 * args.speed_prop_gain,
            'integral_gain':     0.5 * args.speed_prop_gain,
            'derivative_gain':   1.0 * args.speed_prop_gain,
            'max_value': args.max_rpm,
        }
    )

    add_simulator(
        simulators,
        name = 'heading_controller',
        source= pid_source,
        initial_variables = {
            'set_point': 0.0,
            'proportional_gain': 1.0 * args.heading_prop_gain,
            'integral_gain':     0.5 * args.heading_prop_gain,
            'derivative_gain':   4.0 * args.heading_prop_gain,
            'max_value':  args.max_rudder_angle_deg,
            'min_value': -args.max_rudder_angle_deg,
            'reverse_output': True
        }
    )

    # ---------------------------- add connections -------------------------------------------------
    connections[-1].tail = '\n\t\t'

    add_connection(
        connections, 
        simulators = [ship_name, 'speed_controller'], 
        variables  = ['cgShipMotion.linearVelocity.surge', 'input']
    )

    add_connection(
        connections, 
        simulators = [ship_name, 'heading_controller'], 
        variables  = ['course', 'input']
    )

    for thruster_name in thruster_names:
        add_connection(
            connections, 
            simulators = ['speed_controller', thruster_name + '_rpm_rate_limiter'], 
            variables  = ['output', 'dynamic_input']
        )

        add_connection(
            connections, 
            simulators = ['heading_controller', thruster_name + '_angle_rate_limiter'], 
            variables  = ['output', 'dynamic_input']
        )

  
    # ----------------------- Write modified file --------------------------------------------------
    tree.write('OspSystemStructure_with_controllers.xml', encoding='utf-8', xml_declaration=True)