import xml.etree.ElementTree as ET

import argparse

from model_description_utils import *

if __name__ == '__main__':
    '''
    This script modifies a simulation file generated by ShipX to include:
        - a stormbird fmu used to simulate sails
        - a velocity input fmu that converts apparent wind speed and direction to a velocity vector
          suitable for stormbird
        - connections between the ship and velocity input fmu
        - connections between the velocity input fmu and stormbird fmu
        - connections between the forces from the stormbird fmu and additonal body forces for the
          ship fmu

    The change to the xml file is applied using the built-in ElementTree library. 
    '''
    # ------------------------------- Settings -----------------------------------------------------
    parser = argparse.ArgumentParser(description='Add stormbird to simulation.')
    parser.add_argument('--dynamic', action='store_true', help='Run with dynamic sails.')

    args = parser.parse_args()

    ship_name = "SOBC1"
    additional_body_force_index = 1

    stormbird_setup_folder = 'stormbird_setup/'

    if args.dynamic:
        stormbird_setup_path = stormbird_setup_folder + 'stormbird_setup_dynamic.json'
    else:
        stormbird_setup_path = stormbird_setup_folder + 'stormbird_setup_quasi_steady.json'

    fmu_source_folder     = '../../../'
    
    stormbird_source      = fmu_source_folder + 'stormbird_lifting_line/StormbirdLiftingLine.fmu'
    velocity_input_source = fmu_source_folder + 'vesim_to_stormbird/VesimToStormbird.fmu'

    namespace = "http://opensimulationplatform.com/MSMI/OSPSystemStructure"
    
    ET.register_namespace('', namespace)

    # ------------------------------- load original file -------------------------------------------
    tree = ET.parse('OspSystemStructure_with_controllers.xml')

    # get root element
    root = tree.getroot()

    # get simulators and connections
    simulators  = root.find('Simulators', namespaces={'': namespace})
    connections = root.find('Connections', namespaces={'': namespace})
    
    # ----------------------------- add new simulators ---------------------------------------------
    simulators[-1].tail = '\n\t\t'

    add_simulator(
        simulators,
        name = 'sails',
        source= stormbird_source,
        initial_variables = {
            'setup_file_path': stormbird_setup_path,
            'angles_in_degrees': True,
            'relative_angle': 10.0,
            "use_relative_angle": True,
            "use_abl_model": True,
            "write_stormbird_results": True,
            "stormbird_results_path": "output/stormbird_results.json",
            "max_wing_rotation_velocity": 10.0
        }
    )

    add_simulator(
        simulators,
        name = 'velocity_input',
        source= velocity_input_source
    )

    # ---------------------------- add connections -------------------------------------------------
    connections[-1].tail = '\n\t\t'
    
    # From ship to velocity input
    add_connection(
        connections, 
        simulators = [ship_name, 'velocity_input'], 
        variables  = ['global_wind_vel', 'global_wind_velocity']
    )

    add_connection(
        connections, 
        simulators = [ship_name, 'velocity_input'], 
        variables  = ['global_wind_dir', 'global_wind_direction']
    )

    add_connection(
        connections, 
        simulators = [ship_name, 'velocity_input'], 
        variables  = ['course', 'ship_course']
    )

    add_connection(
        connections, 
        simulators = [ship_name, 'velocity_input'], 
        variables  = ['drift_angle', 'drift_angle']
    )

    add_connection(
        connections, 
        simulators = [ship_name, 'velocity_input'], 
        variables  = ['cgShipMotion.linearVelocity.surge', 'surge_velocity']
    )

    add_connection(
        connections, 
        simulators = [ship_name, 'velocity_input'], 
        variables  = ['cgShipMotion.linearVelocity.sway', 'sway_velocity']
    )

    # From velocity input to sails
    add_connection(
        connections, 
        simulators = ['velocity_input', 'sails'], 
        variables  = ['constant_velocity_x', 'constant_velocity_x']
    )

    add_connection(
        connections, 
        simulators = ['velocity_input', 'sails'], 
        variables  = ['constant_velocity_y', 'constant_velocity_y']
    )

    add_connection(
        connections, 
        simulators = ['velocity_input', 'sails'], 
        variables  = ['reference_wind_velocity_x', 'reference_wind_velocity_x']
    )

    add_connection(
        connections, 
        simulators = ['velocity_input', 'sails'], 
        variables  = ['reference_wind_velocity_y', 'reference_wind_velocity_y']
    )

    # From ship to sails
    add_connection(
        connections, 
        simulators = [ship_name, 'sails'], 
        variables  = ['cgShipMotion.angularDisplacement.roll', 'rotation_x']
    )

    # From ship to sails
    add_connection(
        connections, 
        simulators = [ship_name, 'sails'], 
        variables  = ['cgShipMotion.angularDisplacement.pitch', 'rotation_y']
    )

    # From sails to ship
    add_connection(
        connections, 
        simulators = ['sails', ship_name], 
        variables  = ['force_x', 'additionalBodyForce[{:.0f}].force.surge'.format(additional_body_force_index)]
    )

    add_connection(
        connections, 
        simulators = ['sails', ship_name], 
        variables  = ['force_y', 'additionalBodyForce[{:.0f}].force.sway'.format(additional_body_force_index)]
    )

    add_connection(
        connections, 
        simulators = ['sails', ship_name], 
        variables  = ['force_z', 'additionalBodyForce[{:.0f}].force.heave'.format(additional_body_force_index)]
    )

    add_connection(
        connections, 
        simulators = ['sails', ship_name], 
        variables  = ['moment_x', 'additionalBodyForce[{:.0f}].moment.roll'.format(additional_body_force_index)]
    )

    add_connection(
        connections, 
        simulators = ['sails', ship_name], 
        variables  = ['moment_y', 'additionalBodyForce[{:.0f}].moment.pitch'.format(additional_body_force_index)]
    )

    add_connection(
        connections, 
        simulators = ['sails', ship_name], 
        variables  = ['moment_z', 'additionalBodyForce[{:.0f}].moment.yaw'.format(additional_body_force_index)]
    )

    

    # ----------------------- Turn on additional body force ----------------------------------------
    simulator_list = simulators.findall('Simulator', namespaces={'': namespace})

    ship_sim = None
    for sim in simulator_list:
        if sim.attrib['name'] == ship_name:
            ship_sim = sim

    if ship_sim is None:
        raise(ValueError('Ship simulator not found.'))
    
    initial_values = ship_sim.find('InitialValues', namespaces={'': namespace})

    initial_values[-1].tail = '\n\t\t\t\t'

    add_initial_value(
        initial_values,
        variable = 'additionalBodyForce[{:.0f}].enabled'.format(additional_body_force_index),
        value    = True
    )

    # ----------------------- Write modified file --------------------------------------------------
    tree.write('OspSystemStructure_with_stormbird.xml', encoding='utf-8', xml_declaration=True)